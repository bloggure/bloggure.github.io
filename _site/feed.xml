<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Site Title</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2013-09-04T03:17:27-04:00</updated>
<id>/</id>
<author>
  <name>Your Name</name>
  <uri>/</uri>
  <email>you@email.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Merge properties maven plugin]]></title>
  <link>/.maven/maven-merge-properties-plugin</link>
  <id>/.maven/maven-merge-properties-plugin</id>
  <published>2013-08-31T00:00:00-04:00</published>
  <updated>2013-08-31T00:00:00-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;!--:en--&gt;&lt;img class=&quot;alignright size-medium wp-image-74&quot; alt=&quot;Maven&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2010/11/Maven_logo1-300x76.gif&quot; width=&quot;300&quot; height=&quot;76&quot; /&gt;At &lt;a href=&quot;http://www.srmvision.com&quot;&gt;SRMvision&lt;/a&gt;, we develop with localization in mind. We don&#39;t have any user visible text that is not in fact tied to a java property file. Quickly, the problem that we faced was the difficulty to keep every language file in sync (and to tidy things up). We developed a small Maven plugin allowing us to ensure that our two main problems are now gone : &lt;a href=&quot;https://github.com/code-troopers/merge-properties-maven-plugin&quot;&gt;merge-properties-maven-plugin&lt;/a&gt;.
&lt;h2&gt;Quick example&lt;/h2&gt;
I think the easiest way to understand how it works is to explain it with a real use case. Let&#39;s say we have a module named &lt;em&gt;Zones&lt;/em&gt; in our application, it will lead to create four files (if we are localized in two different languages) :
&lt;ul&gt;
	&lt;li&gt;&lt;span style=&quot;line-height: 15px;&quot;&gt;l10n/Zones_en.properties&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;l10n/Zones_fr.properties&lt;/li&gt;
	&lt;li&gt;help/Zones_en.properties&lt;/li&gt;
	&lt;li&gt;help/Zones_fr.properties&lt;/li&gt;
&lt;/ul&gt;
As you might have guessed, we have got two different categories of target files, one for the application&#39;s localization, and the other one for the application&#39;s help. There is only one rule when it comes to filling these files, the property keys must begin with the name of the file, otherwise the build would fail. In this example, every key must begin with the prefix &quot;&lt;tt&gt;Zones.&quot;.&lt;/tt&gt;

At the end, we want to get two resource bundles, so we set up the build to do so :

&lt;script src=&quot;https://gist.github.com/6397201.js?file=pom.xml&quot;&gt; &lt;/script&gt;

By reading this configuration section you can view almost every single option available in the plugin. You can exclude files from automatic key checking : in the example the files Global_*.properties will not be checked. It allows us to group commonly used keys without needing them to begin with the correct prefix (it also eases migration for legacy code, breaking the build would be too intrusive).

You can also notice that we use a Maven property to enable the fail on count mismatch functionality of the plugin, with the help of Maven profiles, we can set it to false for development and to true for continuous integration and translation team. When this configuration is used you will get an output like the following in your Maven build :

&lt;script src=&quot;https://gist.github.com/6397201.js?file=maven.log&quot;&gt; &lt;/script&gt;

If the build should check consistency in merged files and if it does not match, it will output blank keys as well as lonely keys in order for your translator to fix it easily.
&lt;h2&gt;Bonus feature&lt;/h2&gt;
We use Java&#39;s MessageFormat to format our translated string, one of the thing we tend to forget is to escape the single quotes in our translations. The plugin does this magic for us, it automatically adds the missing single quotes in every messages.&lt;!--:--&gt;

  &lt;p&gt;&lt;a href=&quot;/.maven/maven-merge-properties-plugin&quot;&gt;Merge properties maven plugin&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on August 31, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Sample post]]></title>
  <link>/blog/sample-post</link>
  <id>/blog/sample-post</id>
  <published>2013-08-20T00:00:00-04:00</published>
  <updated>2013-08-20T00:00:00-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Tattooed roof party &lt;em&gt;vinyl&lt;/em&gt; freegan single-origin coffee wayfarers tousled, umami yr 
meggings hella selvage. Butcher bespoke seitan, cornhole umami gentrify put a bird 
on it occupy trust fund. Umami whatever kitsch, locavore fingerstache Tumblr pork belly
&lt;a href=&quot;#&quot;&gt;keffiyeh&lt;/a&gt;. Chia Echo Park Pitchfork, Blue Bottle &lt;a href=&quot;#&quot;&gt;hashtag&lt;/a&gt; stumptown skateboard selvage 
mixtape. Echo Park retro butcher banjo cardigan, seitan flannel Brooklyn paleo fixie 
Truffaut. Forage mustache Thundercats next level disrupt. Bicycle rights forage tattooed
chia, &lt;strong&gt;wayfarers&lt;/strong&gt; swag raw denim hashtag biodiesel occupy gastropub!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;its-all-in-the-game&quot;&gt;It’s all in the game.&lt;/h1&gt;
&lt;p&gt;## You come at the king, you best not miss.
### Be subtle with it, man. You know what subtle means?&lt;/p&gt;

&lt;p&gt;VHS post-ironic cred &lt;strong&gt;bespoke&lt;/strong&gt; banjo. Yr wayfarers literally gentrify, flexitarian fap 
dreamcatcher plaid cornhole Intelligentsia paleo. Beard try-hard direct trade, shabby chic 
Helvetica &lt;code&gt;look ma, I can code&lt;/code&gt;. Lo-fi American Apparel tattooed &lt;a href=&quot;#&quot;&gt;Vice&lt;/a&gt; tofu, yr vinyl. 
Williamsburg butcher hella mumblecore fixie mlkshk, cliche wolf keytar mixtape kitsch banh mi 
salvia. High Life Odd Future &lt;em&gt;chambray&lt;/em&gt; kale chips hoodie, cray pop-up. Helvetica narwhal 
iPhone try-hard jean shorts.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a quote from someone famous about productivity&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Syntax highlighting with Solarized theme.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attr_accessible&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


  &lt;p&gt;&lt;a href=&quot;/blog/sample-post&quot;&gt;Sample post&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on August 20, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Another sample]]></title>
  <link>/blog/another-sample</link>
  <id>/blog/another-sample</id>
  <published>2013-08-12T00:00:00-04:00</published>
  <updated>2013-08-12T00:00:00-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Tattooed roof party &lt;em&gt;vinyl&lt;/em&gt; freegan single-origin coffee wayfarers tousled, umami yr 
meggings hella selvage. Butcher bespoke seitan, cornhole umami gentrify put a bird 
on it occupy trust fund. Umami whatever kitsch, locavore fingerstache Tumblr pork belly
&lt;a href=&quot;#&quot;&gt;keffiyeh&lt;/a&gt;. Chia Echo Park Pitchfork, Blue Bottle &lt;a href=&quot;#&quot;&gt;hashtag&lt;/a&gt; stumptown skateboard selvage 
mixtape. Echo Park retro butcher banjo cardigan, seitan flannel Brooklyn paleo fixie 
Truffaut. Forage mustache Thundercats next level disrupt. Bicycle rights forage tattooed
chia, &lt;strong&gt;wayfarers&lt;/strong&gt; swag raw denim hashtag biodiesel occupy gastropub!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;its-all-in-the-game&quot;&gt;It’s all in the game.&lt;/h1&gt;
&lt;p&gt;## You come at the king, you best not miss.
### Be subtle with it, man. You know what subtle means?&lt;/p&gt;

&lt;p&gt;VHS post-ironic cred &lt;strong&gt;bespoke&lt;/strong&gt; banjo. Yr wayfarers literally gentrify, flexitarian fap 
dreamcatcher plaid cornhole Intelligentsia paleo. Beard try-hard direct trade, shabby chic 
Helvetica &lt;code&gt;look ma, I can code&lt;/code&gt;. Lo-fi American Apparel tattooed &lt;a href=&quot;#&quot;&gt;Vice&lt;/a&gt; tofu, yr vinyl. 
Williamsburg butcher hella mumblecore fixie mlkshk, cliche wolf keytar mixtape kitsch banh mi 
salvia. High Life Odd Future &lt;em&gt;chambray&lt;/em&gt; kale chips hoodie, cray pop-up. Helvetica narwhal 
iPhone try-hard jean shorts.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a quote from someone famous about productivity&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Syntax highlighting with Solarized theme.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attr_accessible&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;/blog/another-sample&quot;&gt;Another sample&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on August 12, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Play Framework and i18n in views]]></title>
  <link>/work/play-framework-and-i18n-in-views</link>
  <id>/work/play-framework-and-i18n-in-views</id>
  <published>2013-07-25T00:00:00-04:00</published>
  <updated>2013-07-25T00:00:00-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;!--:en--&gt;&lt;img class=&quot;alignright size-full wp-image-916&quot; alt=&quot;playlogo&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2013/07/playlogo.png&quot; width=&quot;150&quot; height=&quot;50&quot; /&gt;

I was having a strange issue with localization in a Play Framework application. I followed the &lt;a href=&quot;http://www.playframework.com/documentation/2.0/ScalaI18N&quot;&gt;simple steps&lt;/a&gt; detailed on the official documentation but with no luck.

When experimenting, I figured out that the locale used is the default locale of the JVM. In my case, my default locale is French so I only had French in my application. But on Heroku, the default locale is English and thus the application was only working in English.

The trick consists in adding an implicit lang to your template views. In fact, Scala import an implicit lang with the lowest priority being the one coming from the JVM, if you want to get the language parsed from the Accept-Languages http header, you need to add an implicit as below :
&lt;pre class=&quot;brush: scala&quot;&gt;@(title: String)(content: Html)(implicit lang: Lang)&lt;/pre&gt;
With this little trick, your calls to localization will use the locale extracted from the http request as expected.&lt;!--:--&gt;&lt;!--:fr--&gt;&lt;img class=&quot;alignright size-full wp-image-916&quot; alt=&quot;playlogo&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2013/07/playlogo.png&quot; width=&quot;150&quot; height=&quot;50&quot; /&gt;

I was having a strange issue with localization in a Play Framework application. I followed the &lt;a href=&quot;http://www.playframework.com/documentation/2.0/ScalaI18N&quot;&gt;simple steps&lt;/a&gt; detailed on the official documentation but with no luck.

When experimenting, I figured out that the locale used is the default locale of the JVM. In my case, my default locale is French so I only had French in my application. But on Heroku, the default locale is English and thus the application was only working in English.

The trick consists in adding an implicit lang to your template views. In fact, Scala import an implicit lang with the lowest priority being the one coming from the JVM, if you want to get the language parsed from the Accept-Languages http header, you need to add an implicit as below :
&lt;pre class=&quot;brush: scala&quot;&gt;@(title: String)(content: Html)(implicit lang: Lang)&lt;/pre&gt;
With this little trick, your calls to localization will use the locale extracted from the http request as expected.&lt;!--:--&gt;

  &lt;p&gt;&lt;a href=&quot;/work/play-framework-and-i18n-in-views&quot;&gt;Play Framework and i18n in views&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on July 25, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Play application on Centos/RedHat in production mode]]></title>
  <link>/.java/.scala/.shell/ci/shelf/centos-redhat-play-application-production-mode</link>
  <id>/.java/.scala/.shell/ci/shelf/centos-redhat-play-application-production-mode</id>
  <published>2013-07-25T00:00:00-04:00</published>
  <updated>2013-07-25T00:00:00-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;!--:fr--&gt;&lt;p&gt;&lt;strong&gt;tl;dr &lt;/strong&gt;: application &lt;a title=&quot;play&quot; href=&quot;http://www.playframework.com/&quot;&gt;Play&lt;/a&gt; (java ou &lt;a href=&quot;http://www.scala-lang.org/&quot;&gt;scala&lt;/a&gt;) sur un serveur &lt;a href=&quot;http://www.centos.org/&quot;&gt;Centos&lt;/a&gt; (ou &lt;a href=&quot;http://fr.wikipedia.org/wiki/Red_Hat_Linux&quot;&gt;Red Hat&lt;/a&gt;) derrière un serveur &lt;a title=&quot;nginx&quot; href=&quot;http://nginx.org/&quot;&gt;nginx&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Script de démarrage/arrêt du daemon.&lt;/h2&gt;&lt;p&gt;Lancer une application Play en dev est assez aisé : &lt;code&gt;$ play run&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Maintenant, si vous avez besoin de déployer votre application en production, il est plus confortable de considérer votre application comme un service à part entière du système. Il se peut aussi que vous ayez besoin de spécifier un port et une interface particulière pour pouvoir utiliser nginx comme front-end (en &lt;a href=&quot;http://fr.wikipedia.org/wiki/Proxy_inverse&quot;&gt;reverse proxy&lt;/a&gt;). Et évidement, à l&#39;instar d&#39;un environnement de développement, vous pourriez avoir besoin de compresser le JS et le CSS, et également de régler finement les en-têtes HTTP pour gérer correctement le cache.&lt;/p&gt;&lt;p&gt;Tout d&#39;abord le script de lancement du daemon :&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/tdebarochez/6082933.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Je me suis inspiré des deux gists ci-dessous. Le premier, pour RedHat, utilise le binaire de play pour lancer le processus principal. Cette méthode facile à utiliser en développement semble assez limité en paramètre (tout du moins, très peu documentée). La seconde méthode, pour &lt;a href=&quot;http://www.debian.org/&quot;&gt;Debian&lt;/a&gt;, donne un bonne exemple d&#39;une configuration un peu plus élaborée de l&#39;exécution du daemon. Les paramètres en début de fichier parlent d&#39;eux-mêmes, je vous laisse les découvrir et reste à votre disposition pour toute question.&lt;/p&gt;&lt;p&gt;Source :&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/THemming/2173037&quot;&gt;https://gist.github.com/THemming/2173037&lt;/a&gt; (script pour redhat)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/leon/2204773&quot;&gt;https://gist.github.com/leon/2204773&lt;/a&gt; (script pour debian)&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Configuration de nginx&lt;/h2&gt;&lt;p&gt;Sur un serveur web, il est souvent pratique de pouvoir faire tourner plusieurs applications utilisant des langages, des librairies, des frameworks, etc... hétérogènes (sur mon serveur, il y a l&#39;application Play en scala, une application &lt;a href=&quot;http://nodejs.org/&quot;&gt;Nodejs&lt;/a&gt; en &lt;a href=&quot;http://coffeescript.org/&quot;&gt;Coffescript&lt;/a&gt; et une application &lt;a href=&quot;http://php.net&quot;&gt;PHP&lt;/a&gt;/&lt;a href=&quot;http://www.mysql.fr/&quot;&gt;MySQL&lt;/a&gt; utilisant &lt;a href=&quot;http://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt;). C&#39;est là que nginx intervient. Configuré en reverse-proxy, c&#39;est lui qui écoutera sur le port 80 de votre serveur et en fonction du nom de domaine relayera les requêtes HTTP à l&#39;application que vous avez choisis. Il vous suffit de configurer votre application en écoute sur un port libre en localhost et d&#39;indiquer à nginx qu&#39;en fonction du nom de domaine (à la manière des VirtualHost d&#39;Apache), il doit transmettre ses requêtes sur ce port.&lt;/p&gt;&lt;p&gt;Vous noterez une section fournissant un traitement particulier pour les fichiers statiques (js, css, png, jpg, etc...). En effet, je ne trouvais pas la configuration par défaut de play très satisfaisante pour diffuser ces fichiers. Il conviendra donc de copier tous les fichiers dans un dossier particulier au lancement de l&#39;application (il faut également pensé à y placer les fichiers &quot;compilé&quot; des scripts utilisant un pre-processeurs : coffeescript, &lt;a href=&quot;http://sass-lang.com&quot;&gt;SASS/SCSS&lt;/a&gt;, &lt;a href=&quot;http://lesscss.org/&quot;&gt;LESS&lt;/a&gt;, etc...). Tous les fichiers dans ce dossier auront une durée de cache maximale afin de minimiser le nombre de requêtes au serveur (la requête la plus rapide est celle qui n&#39;est pas faite). Cette technique a aussi l&#39;avantage de décharger la JVM du traitement de ses fichiers, ils sont directement retourné par nginx.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/tdebarochez/6083089.js&quot;&gt;&lt;/script&gt;
&lt;h2&gt;Compilation des fichiers statiques&lt;/h2&gt;&lt;p&gt;Les pré-processeurs (Coffeescript, SASS, LESS, etc...) sont d&#39;un grand confort pour le développement de la partie front-end d&#39;une application web. Toutefois, il y a quelques détails qui ne faut pas négliger afin d&#39;optimiser au maximum la distribution en HTTP de ces fichiers.&lt;/p&gt;&lt;p&gt;Prenons comme exemple un fichier .coffee (Coffeescript). Lorsqu&#39;en développement vous lancer votre serveur, play se charge de re-compiler automatiquement le fichier afin de desservir un fichier javascript au navigateur qui a demandé le fichier. Dans notre environnement, les fichiers statiques se trouvent tous dans un dossier &lt;code&gt;static/&lt;/code&gt;. Il faut donc &quot;traduire&quot; ce fichier en javascript et le placer dans ce dossier (en respectant l&#39;arborescence utilisée en développement) : &lt;code&gt;coffee -o static/javascripts/ -c app/assets/javascripts/*.coffee&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Ensuite, comme optimisation souvent préconnisée, il convient de &quot;minifier&quot; ces fichiers afin qu&#39;ils soient le plus léger possible pendant le transport sur le réseau (qui peut-être une faible connexion 3g). Dans mon cas, j&#39;ai utilisé &lt;a href=&quot;https://github.com/yui/yuicompressor&quot;&gt;&lt;code&gt;yuicompressor&lt;/code&gt;&lt;/a&gt; qui fonctionne bien. Il en existe certainement des mieux, je n&#39;ai pas testé, mais celui-là fonctionne comme je veux.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/tdebarochez/6083307.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Note : comme amélioration possible, il faudrait dans cette partie là renommer les fichiers par un nom de fichier contenant un hash représentant le contenu de ce fichier afin de palier à tout problème d&#39;invalidation du cache.&lt;/p&gt;&lt;h2&gt;Dans le futur&lt;/h2&gt;&lt;p&gt;Pour parfaire le déploiement de l&#39;application, sur un VCS &lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt; par exemple, il serait pratique d&#39;automatiser le redémarrage du serveur sur un hook post-commit. Pour éviter également une coupure de service, il faudrait également, lancer la nouvelle application sur un autre port et switcher sur la nouvelle instance uniquement avec un reload de nginx. Mais bon tout ça peut faire l&#39;objet d&#39;un autre article. :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mise à jour du 29 juillet 2013&lt;/strong&gt; : correction du script de lancement du daemon.&lt;/p&gt;&lt;!--:--&gt;

  &lt;p&gt;&lt;a href=&quot;/.java/.scala/.shell/ci/shelf/centos-redhat-play-application-production-mode&quot;&gt;Play application on Centos/RedHat in production mode&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on July 25, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Heroku Play ! Scala Compass Buildpack]]></title>
  <link>/.java/work/heroku-play-scala-compass-buildpack</link>
  <id>/.java/work/heroku-play-scala-compass-buildpack</id>
  <published>2013-07-08T00:00:00-04:00</published>
  <updated>2013-07-08T00:00:00-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;!--:en--&gt;&lt;img class=&quot;size-thumbnail wp-image-758 alignright&quot; alt=&quot;MBP Keyboard&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2012/12/IMG_20121222_000541-150x150.jpg&quot; width=&quot;150&quot; height=&quot;150&quot; /&gt;I am actually working on a little side project with my friend &lt;a href=&quot;http://www.bloggure.info/author/tdebarochez&quot;&gt;Thomas Debarochez&lt;/a&gt;. We are using &lt;a href=&quot;http://www.playframework.com/&quot;&gt;Play!Framework&lt;/a&gt; and &lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass&lt;/a&gt; and we deploy it to &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;.

One issue that came when we first deployed the application with Compass to Heroku was that the default scala buildpack does not include sass and compass binaries.

Following &lt;a href=&quot;https://groups.google.com/forum/#!topic/play-framework/fzGj5RqW-l8&quot;&gt;this post&lt;/a&gt; on the Play!Framework mailing list, I forked and patched the &lt;a href=&quot;https://github.com/heroku/heroku-buildpack-scala&quot;&gt;buildpack&lt;/a&gt; to install sass and compass on the environment.

You can find it here and use it with the following command :
&lt;pre class=&quot;brush:bash&quot;&gt;heroku config:set BUILDPACK_URL=https://github.com/CedricGatay/heroku-buildpack-scala&lt;/pre&gt;
I hope someone will find this useful !&lt;!--:--&gt;

  &lt;p&gt;&lt;a href=&quot;/.java/work/heroku-play-scala-compass-buildpack&quot;&gt;Heroku Play ! Scala Compass Buildpack&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on July 08, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Wicket Routes Mount]]></title>
  <link>/.wicket/wicket-routes-mount</link>
  <id>/.wicket/wicket-routes-mount</id>
  <published>2013-05-20T00:00:00-04:00</published>
  <updated>2013-05-20T00:00:00-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;!--:en--&gt;&lt;img class=&quot;alignright size-thumbnail wp-image-90&quot; alt=&quot;Wicket&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2010/10/logo-wicket1-150x150.png&quot; width=&quot;150&quot; height=&quot;150&quot; /&gt;

At &lt;a href=&quot;http://code-troopers.com&quot;&gt;Code-Troopers&lt;/a&gt;, we like to work with the frameworks we love. One of them is &lt;a href=&quot;http://wicket.apache.org&quot;&gt;Apache Wicket&lt;/a&gt;, and it happens to some of us doing some &lt;a href=&quot;http://www.playframework.com/&quot;&gt;Play! Framework&lt;/a&gt; or &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt; (either for a client project, a side project or giving back OSS love).

One thing really great is this two frameworks is the central route system, one file allows to group all the routes handled by your application. Wicket does not provide such way of grouping routes, you can manually mount routes into your application or annotate your page classes.
&lt;h2&gt;Wicket routes mount library&lt;/h2&gt;
&lt;a href=&quot;https://github.com/code-troopers/wicket-routes-mount&quot;&gt;This small library project available on Github&lt;/a&gt; allows to group mounts into a central file. To use it, simply add its dependency to your &lt;code&gt;pom.xml&lt;/code&gt; (artifact is available on Maven central):
&lt;pre class=&quot;&amp;quot;brush:xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.code-troopers&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;wicket-route-mount&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/pre&gt;
&lt;em&gt;
This dependency will transitively gets &lt;code&gt;wicket-auth-roles&lt;/code&gt; (if there is a special need for a version without this dependency, it could be done easily).
&lt;/em&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
To use it, simply create a &lt;code&gt;routes.conf&lt;/code&gt; file at the root of the sources in your project (typically &lt;code&gt;src/main/resources/&lt;/code&gt;) respecting the following format :
&lt;pre&gt;# mountPoint        class                           roles
/home               codetroopers.HomePage           
/secured            codetroopers.SecuredPage        USER
/user/${mode}/#{id} codetroopers.UserPage           ADMIN,USER&lt;/pre&gt;
The files content is the following :
&lt;ul&gt;
	&lt;li&gt;Mount path : using standard Wicket syntax (&lt;code&gt;${requiredParam}&lt;/code&gt; and &lt;code&gt;#{optionalParam}&lt;/code&gt; are available)&lt;/li&gt;
	&lt;li&gt;Page class : fully qualified name of the page class to mount&lt;/li&gt;
	&lt;li&gt;Roles (optional) : comma separated list of roles required to access the page&lt;/li&gt;
&lt;/ul&gt;
&lt;em&gt;IntelliJ IDEA can do completion for class names in this file (you just need to hit the &lt;code&gt;ctrl+space&lt;/code&gt; shortcut twice)&lt;/em&gt;&lt;!--:--&gt;

  &lt;p&gt;&lt;a href=&quot;/.wicket/wicket-routes-mount&quot;&gt;Wicket Routes Mount&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on May 20, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[DuckDuckGo in Thunderbird]]></title>
  <link>/www/duckduckgo-in-thunderbird</link>
  <id>/www/duckduckgo-in-thunderbird</id>
  <published>2013-03-24T00:00:00-04:00</published>
  <updated>2013-03-24T00:00:00-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;!--:en--&gt;&lt;a href=&quot;http://www.bloggure.info/wp-content/uploads/2013/03/logo_homepage.normal.v102.png&quot;&gt;&lt;img class=&quot;alignright size-thumbnail wp-image-890&quot; alt=&quot;Logo DuckDuckGo&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2013/03/logo_homepage.normal.v102-150x150.png&quot; width=&quot;150&quot; height=&quot;150&quot; /&gt;&lt;/a&gt;Mozilla added a function to search on the web in the latest versions of Thunderbird.That&#39;s nice, but the default search engine is bing. As a DuckDuckGo user, I wanted to add my favourite search engine and use it by default. So here&#39;s how to do it.
&lt;ol&gt;
	&lt;li&gt;&lt;a title=&quot;Find your Thunderbird profile folder&quot; href=&quot;http://kb.mozillazine.org/Profile_folder_-_Thunderbird&quot;&gt;Find your profile folder&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;In it, create a folder named &quot;searchplugins&quot; (without the quotes) if it doesn&#39;t exists.&lt;/li&gt;
	&lt;li&gt;Save &lt;a title=&quot;DuckDuckGo search plugin&quot; href=&quot;http://www.fribourg-est-independant.org/fonji/ddg.xml&quot;&gt;this xml&lt;/a&gt; file in it.&lt;/li&gt;
	&lt;li&gt;(Re)start Thunderbird.&lt;/li&gt;
	&lt;li&gt;Select some text in any mail, right clic and search with bing (sorry).&lt;/li&gt;
	&lt;li&gt;Click the DuckDuckGo icon on the left.&lt;/li&gt;
	&lt;li&gt;Click the heart icon on the bottom left.&lt;/li&gt;
	&lt;li&gt;That&#39;s all!&lt;/li&gt;
&lt;/ol&gt;
To add google, add &lt;a href=&quot;http://bwinton.latte.ca/Work/google.xml&quot;&gt;this file&lt;/a&gt; in the same folder.&lt;!--:--&gt;&lt;!--:fr--&gt;&lt;a href=&quot;http://www.bloggure.info/wp-content/uploads/2013/03/logo_homepage.normal.v102.png&quot;&gt;&lt;img class=&quot;alignright size-thumbnail wp-image-890&quot; alt=&quot;Logo DuckDuckGo&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2013/03/logo_homepage.normal.v102-150x150.png&quot; width=&quot;150&quot; height=&quot;150&quot; /&gt;&lt;/a&gt;Mozilla a ajouté une fonction de recherche sur internet dans les dernières versions de Thunderbird. C&#39;est très utile, mais le moteur par défaut est bing et, en tant qu&#39;utilisateur de DuckDuckGo, j&#39;ai voulu changer ceci pour mettre mon moteur favori à la place. Voici comment procéder :
&lt;ol&gt;
	&lt;li&gt;&lt;a title=&quot;Trouver votre profil thunderbird&quot; href=&quot;https://support.mozillamessaging.com/fr/kb/profil-utilisateur#w_oai-mon-profil-est-il-stockae&quot;&gt;Trouvez le répertoire de votre profil.&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Créez un répertoire &quot;searchplugins&quot; (sans guillemets) s&#39;il n&#39;existe pas déjà.&lt;/li&gt;
	&lt;li&gt;Sauvegardez &lt;a title=&quot;DuckDuckGo search plugin&quot; href=&quot;http://www.fribourg-est-independant.org/fonji/ddg.xml&quot;&gt;ce fichier xml&lt;/a&gt; dans searchplugins.&lt;/li&gt;
	&lt;li&gt;(Re)démarrez Thunderbird.&lt;/li&gt;
	&lt;li&gt;Selectionnez du texte dans un email, faites un clic droit puis &quot;rechercher avec bing&quot; (désolé).&lt;/li&gt;
	&lt;li&gt;Cliquez l&#39;icône DuckDuckGo sur la gauche.&lt;/li&gt;
	&lt;li&gt;Cliquez sur le cœur dans le coin en bas à gauche.&lt;/li&gt;
	&lt;li&gt;C&#39;est tout !&lt;/li&gt;
&lt;/ol&gt;
Pour utiliser google, ajoutez &lt;a href=&quot;http://bwinton.latte.ca/Work/google.xml&quot;&gt;ce fichier&lt;/a&gt; dans le même répertoire.&lt;!--:--&gt;

  &lt;p&gt;&lt;a href=&quot;/www/duckduckgo-in-thunderbird&quot;&gt;DuckDuckGo in Thunderbird&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on March 24, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alfred.app Glassfish workflow]]></title>
  <link>/.java/alfred-glassfish-workflow</link>
  <id>/.java/alfred-glassfish-workflow</id>
  <published>2013-03-19T00:00:00-04:00</published>
  <updated>2013-03-19T00:00:00-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;!--:en--&gt;&lt;img class=&quot;size-thumbnail wp-image-879 alignright&quot; alt=&quot;alfred-icon&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2013/03/alfred-icon-150x150.jpg&quot; width=&quot;150&quot; height=&quot;150&quot; /&gt;I recently bought the &lt;a href=&quot;http://www.alfredapp.com/&quot;&gt;Alfred.app&lt;/a&gt; Powerpack. It is byfar the best application launcher / automation engine I&#39;ve ever used. One of the new features of the second version of this application is user customizable workflows.
In my daily activities, I start, stop, restart and kill my &lt;a href=&quot;http://www.oracle.com/technetwork/middleware/glassfish/overview/index.html&quot;&gt;Glassfish&lt;/a&gt; server several times a day. In order to save me a few keystrokes and a few alt-tabbing, I created this small workflow allowing me to manage my local Glassfish instance.

You can find the Alfred worfklow at the following url &lt;a href=&quot;http://bit.ly/alfred-glassfish&quot;&gt;http://bit.ly/alfred-glassfish&lt;/a&gt;.
You will probably need to adapt the GF_PATH variable in the script to point to the root of your Glassfish installation.

Once this small step is done, you&#39;ll end up with the following prompt in your Alfred :

[caption id=&quot;attachment_878&quot; align=&quot;aligncenter&quot; width=&quot;300&quot;]&lt;img class=&quot;size-medium wp-image-878&quot; alt=&quot;Alfred with Glassfish workflow enabled&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2013/03/Capture-d’écran-2013-03-19-à-09.53.20-300x102.png&quot; width=&quot;300&quot; height=&quot;102&quot; /&gt; Alfred with Glassfish workflow enabled[/caption]&lt;!--:--&gt;&lt;!--:fr--&gt;&lt;img class=&quot;size-thumbnail wp-image-879 alignright&quot; alt=&quot;alfred-icon&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2013/03/alfred-icon-150x150.jpg&quot; width=&quot;150&quot; height=&quot;150&quot; /&gt;I recently bought the &lt;a href=&quot;http://www.alfredapp.com/&quot;&gt;Alfred.app&lt;/a&gt; Powerpack. It is byfar the best application launcher / automation engine I&#39;ve ever used. One of the new features of the second version of this application is user customizable workflows.
In my daily activities, I start, stop, restart and kill my &lt;a href=&quot;http://www.oracle.com/technetwork/middleware/glassfish/overview/index.html&quot;&gt;Glassfish&lt;/a&gt; server several times a day. In order to save me a few keystrokes and a few alt-tabbing, I created this small workflow allowing me to manage my local Glassfish instance.

You can find the Alfred worfklow at the following url &lt;a href=&quot;http://bit.ly/alfred-glassfish&quot;&gt;http://bit.ly/alfred-glassfish&lt;/a&gt;.
You will probably need to adapt the GF_PATH variable in the script to point to the root of your Glassfish installation.

Once this small step is done, you&#39;ll end up with the following prompt in your Alfred :

[caption id=&quot;attachment_878&quot; align=&quot;aligncenter&quot; width=&quot;300&quot;]&lt;img class=&quot;size-medium wp-image-878&quot; alt=&quot;Alfred with Glassfish workflow enabled&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2013/03/Capture-d’écran-2013-03-19-à-09.53.20-300x102.png&quot; width=&quot;300&quot; height=&quot;102&quot; /&gt; Alfred with Glassfish workflow enabled[/caption]&lt;!--:--&gt;

  &lt;p&gt;&lt;a href=&quot;/.java/alfred-glassfish-workflow&quot;&gt;Alfred.app Glassfish workflow&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on March 19, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Wicket 6 + CDI on Heroku]]></title>
  <link>/.wicket/work/wicket-6-cdi-on-heroku</link>
  <id>/.wicket/work/wicket-6-cdi-on-heroku</id>
  <published>2013-03-03T00:00:00-05:00</published>
  <updated>2013-03-03T00:00:00-05:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;!--:en--&gt;&lt;p&gt;&lt;img class=&quot;alignright size-full wp-image-865&quot; alt=&quot;herokuwicket&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2013/03/herokuwicket.png&quot; width=&quot;96&quot; height=&quot;96&quot; /&gt;As an &lt;a href=&quot;http://apache.wicket.org&quot;&gt;Apache Wicket&lt;/a&gt; user for more than five years I really enjoy its programming model. I recently played with &lt;a href=&quot;http://www.playframework.com/&quot;&gt;Play Framework&lt;/a&gt; 2.1 and Scala and discovered that deploying to &lt;a href=&quot;http://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; is as easy as a git push. I wondered how difficult it could be using this mechanism to deploy a Wicket application.&lt;/p&gt;&lt;h1&gt;Existing attempts&lt;/h1&gt;&lt;p&gt;My initial investigation led me to this &lt;a href=&quot;http://wicketinaction.com/2011/09/git-wicket-running-on-heroku/&quot;&gt;blog post from Martijn Dashorst&lt;/a&gt; explaining how to deploy a Wicket 1.5 application to Heroku, the service has slightly evolved since and the quickstart no longer deploys (Maven repository is no longer available to the run environment).&lt;/p&gt;&lt;h1&gt;Adding JPA in the mix&lt;/h1&gt;&lt;p&gt;I adapted it to deploy and use Wicket 6 instead of 1.5. And as I am a CDI fan I completed the quickstart with the CDI Wicket module (inspired from &lt;a href=&quot;https://www.42lines.net/2011/11/21/adding-jpahibernate-into-the-cdi-and-wicket-mix/&quot;&gt;this post from Igor Vaynberg&lt;/a&gt;) and made the necessary steps to use the heroku bundled PostgreSQL database as a JPA datasource.&lt;/p&gt;&lt;p&gt;The key to make the database works correctly on Heroku resides in the following code snippet, where we parse the provided environment variable to populate hibernate properties.&lt;/p&gt;&lt;pre class=&quot;brush: java&quot;&gt;try {
     URI dbUri = new URI(System.getenv(&quot;DATABASE_URL&quot;));
     String username = dbUri.getUserInfo().split(&quot;:&quot;)[0];
     String password = dbUri.getUserInfo().split(&quot;:&quot;)[1];
     String dbUrl = &quot;jdbc:postgresql://&quot; + dbUri.getHost() 
                    + &#39;:&#39; + dbUri.getPort() + dbUri.getPath();
     System.setProperty(&quot;hibernate.connection.url&quot;, dbUrl);
     System.setProperty(&quot;hibernate.connection.user&quot;, username);
     System.setProperty(&quot;hibernate.connection.password&quot;, password);
} catch (Exception e) {
     LOGGER.error(&quot;Unable to extract database url&quot;);
}&lt;/pre&gt;&lt;h1&gt;Session replication&lt;/h1&gt;&lt;p&gt;On Wicket mailing lists, &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/wicket-users/201301.mbox/%3C20130109180456.21633f6d4d230ce5688fd451@gmx.net%3E&quot;&gt;a user recently asked&lt;/a&gt; the steps required to get the data store works correctly on Heroku (as the disk space is ephemeral), the key is using a NoSQL backend like &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;. So I wrote a simple and basic implementation of IDataStore using Redis (I think it can be optimized by someone familiar with Redis, pull requests are welcome).&lt;/p&gt;&lt;h1&gt;Hands on&lt;/h1&gt;&lt;p&gt;The quickstart can be found &lt;a href=&quot;https://github.com/CedricGatay/heroku-wicket-quickstart&quot;&gt;at the following address&lt;/a&gt; and deploys fine on a stack with &lt;a href=&quot;http://redis-cloud.com/&quot;&gt;Redis Cloud&lt;/a&gt; and PostgreSQL add ons enabled.&lt;br /&gt; In the end you got :&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Wicket 6&lt;/li&gt;&lt;li&gt;CDI via Weld&lt;/li&gt;&lt;li&gt;JPA with PostgreSQL&lt;/li&gt;&lt;li&gt;Redis datastore&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can see it live at the following address : &lt;a href=&quot;http://wicket-6-sample.herokuapp.com/&quot;&gt;http://wicket-6-sample.herokuapp.com/&lt;/a&gt;, the app can take a few seconds to start, as Heroku will stop it if it is idling for too long.&lt;/p&gt;&lt;!--:--&gt;&lt;!--:fr--&gt;&lt;p&gt;&lt;img class=&quot;alignright size-full wp-image-865&quot; alt=&quot;herokuwicket&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2013/03/herokuwicket.png&quot; width=&quot;96&quot; height=&quot;96&quot; /&gt;As an &lt;a href=&quot;http://apache.wicket.org&quot;&gt;Apache Wicket&lt;/a&gt; user for more than five years I really enjoy its programming model. I recently played with &lt;a href=&quot;http://www.playframework.com/&quot;&gt;Play Framework&lt;/a&gt; 2.1 and Scala and discovered that deploying to &lt;a href=&quot;http://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; is as easy as a git push. I wondered how difficult it could be using this mechanism to deploy a Wicket application.&lt;/p&gt;&lt;h1&gt;Existing attempts&lt;/h1&gt;&lt;p&gt;My initial investigation led me to this &lt;a href=&quot;http://wicketinaction.com/2011/09/git-wicket-running-on-heroku/&quot;&gt;blog post from Martijn Dashorst&lt;/a&gt; explaining how to deploy a Wicket 1.5 application to Heroku, the service has slightly evolved since and the quickstart no longer deploys (Maven repository is no longer available to the run environment).&lt;/p&gt;&lt;h1&gt;Adding JPA in the mix&lt;/h1&gt;&lt;p&gt;I adapted it to deploy and use Wicket 6 instead of 1.5. And as I am a CDI fan I completed the quickstart with the CDI Wicket module (inspired from &lt;a href=&quot;https://www.42lines.net/2011/11/21/adding-jpahibernate-into-the-cdi-and-wicket-mix/&quot;&gt;this post from Igor Vaynberg&lt;/a&gt;) and made the necessary steps to use the heroku bundled PostgreSQL database as a JPA datasource.&lt;/p&gt;&lt;p&gt;The key to make the database works correctly on Heroku resides in the following code snippet, where we parse the provided environment variable to populate hibernate properties.&lt;/p&gt;&lt;pre class=&quot;brush: java&quot;&gt;try {
     URI dbUri = new URI(System.getenv(&quot;DATABASE_URL&quot;));
     String username = dbUri.getUserInfo().split(&quot;:&quot;)[0];
     String password = dbUri.getUserInfo().split(&quot;:&quot;)[1];
     String dbUrl = &quot;jdbc:postgresql://&quot; + dbUri.getHost() 
                    + &#39;:&#39; + dbUri.getPort() + dbUri.getPath();
     System.setProperty(&quot;hibernate.connection.url&quot;, dbUrl);
     System.setProperty(&quot;hibernate.connection.user&quot;, username);
     System.setProperty(&quot;hibernate.connection.password&quot;, password);
} catch (Exception e) {
     LOGGER.error(&quot;Unable to extract database url&quot;);
}&lt;/pre&gt;&lt;h1&gt;Session replication&lt;/h1&gt;&lt;p&gt;On Wicket mailing lists, &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/wicket-users/201301.mbox/%3C20130109180456.21633f6d4d230ce5688fd451@gmx.net%3E&quot;&gt;a user recently asked&lt;/a&gt; the steps required to get the data store works correctly on Heroku (as the disk space is ephemeral), the key is using a NoSQL backend like &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;. So I wrote a simple and basic implementation of IDataStore using Redis (I think it can be optimized by someone familiar with Redis, pull requests are welcome).&lt;/p&gt;&lt;h1&gt;Hands on&lt;/h1&gt;&lt;p&gt;The quickstart can be found &lt;a href=&quot;https://github.com/CedricGatay/heroku-wicket-quickstart&quot;&gt;at the following address&lt;/a&gt; and deploys fine on a stack with &lt;a href=&quot;http://redis-cloud.com/&quot;&gt;Redis Cloud&lt;/a&gt; and PostgreSQL add ons enabled.&lt;br /&gt; In the end you got :&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Wicket 6&lt;/li&gt;&lt;li&gt;CDI via Weld&lt;/li&gt;&lt;li&gt;JPA with PostgreSQL&lt;/li&gt;&lt;li&gt;Redis datastore&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can see it live at the following address : &lt;a href=&quot;http://wicket-6-sample.herokuapp.com/&quot;&gt;http://wicket-6-sample.herokuapp.com/&lt;/a&gt;, the app can take a few seconds to start, as Heroku will stop it if it is idling for too long.&lt;/p&gt;&lt;!--:--&gt;

  &lt;p&gt;&lt;a href=&quot;/.wicket/work/wicket-6-cdi-on-heroku&quot;&gt;Wicket 6 + CDI on Heroku&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on March 03, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Use Wicket templating system to generate Html]]></title>
  <link>/.java/.wicket/use-wicket-templating-system-to-generate-html</link>
  <id>/.java/.wicket/use-wicket-templating-system-to-generate-html</id>
  <published>2013-01-20T00:00:00-05:00</published>
  <updated>2013-01-20T00:00:00-05:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;
&lt;img src=&quot;http://www.bloggure.info/wp-content/uploads/2013/01/html-icon.png&quot; alt=&quot;html-icon&quot; width=&quot;128&quot; height=&quot;128&quot; class=&quot;alignright size-full wp-image-844&quot; /&gt;&lt;a href=&quot;http://wicket.apache.org&quot;&gt;Apache Wicket&lt;/a&gt; is a great web framework, its clear separation between logic and markup allows to focus on what&#39;s need to be done. &lt;br/&gt; 
As we use Wicket at &lt;a href=&quot;https://www.srmvision.com&quot;&gt;SRMvision&lt;/a&gt;, we needed to send mails with rather rich templates to our users. The first implementation we used was relying on Wicket to generate these templates using Html. We finally don&#39;t use it (our mailing tasks are done by a background job, thus we don&#39;t have access to our webapp), but I though the code used in our fast proof of concept could help someone else.
&lt;/p&gt;
&lt;pre class=&quot;brush: java&quot;&gt;
import org.apache.wicket.markup.MarkupType;
import org.apache.wicket.markup.html.WebMarkupContainer;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.markup.repeater.RepeatingView;
import org.apache.wicket.model.PropertyModel;
import org.apache.wicket.request.Response;
import org.apache.wicket.response.StringResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * Simple panel allowing to use the templating engine 
 *    provided by Wicket to generate HTML.
 * Typical use would be to generate mail content.
 *
 * User of this class will need to subclass it 
 *    and create a panel as usual. 
 * Then a call to getHtml() will return the generated Html.
 *
 * @author cedric at gatay.fr
 */
public class HtmlTemplaterPanel extends Panel {
    private static final Logger LOGGER = 
        LoggerFactory.getLogger(HtmlTemplaterPanel.class);

    /**
     * Default constructor takes no wicket:id &gt; 
     *   the panel will not be added to any component
     */
    public HtmlTemplaterPanel(){
        super(&quot;dummy&quot;);
    }

    /**
     * Call this whenever you want to get
     *   the Html for this component
     * @return Html or empty string
     */
    public String getHtml(){
        final Response origResponse = getRequestCycle().getResponse();
        try{
            final StringResponse stringResponse = new StringResponse();
            getRequestCycle().setResponse(stringResponse);
            renderAssociatedMarkup(&quot;panel&quot;, &quot;&quot;);
            return stringResponse.toString();
        }catch(Exception e){
            LOGGER.error(&quot;Unable to build HTML for panel : {}&quot;,
                         e.getMessage());
        }finally{
            getRequestCycle().setResponse(origResponse);
        }
        return &quot;&quot;;
    }

    @Override
    protected boolean getStatelessHint() {
        return true;
    }

    @Override
    public MarkupType getMarkupType() {
        return MarkupType.HTML_MARKUP_TYPE;
    }
}
&lt;/pre&gt;
&lt;p&gt;
If you want to generate a template using Apache Wicket, you only need to create a Panel and its associated markup which inherits this simple class. Then, when you want to get the Html for your component, call &lt;code&gt;getHtml()&lt;/code&gt;.&lt;br/&gt;
The only drawback of this is that you need a RequestCycle to generate the markup (you&#39;ll find out why reading the code).
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/.java/.wicket/use-wicket-templating-system-to-generate-html&quot;&gt;Use Wicket templating system to generate Html&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on January 20, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[De Free à Numericable]]></title>
  <link>/thoughts/de-free-a-numericable</link>
  <id>/thoughts/de-free-a-numericable</id>
  <published>2013-01-12T00:00:00-05:00</published>
  <updated>2013-01-12T00:00:00-05:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;h2&gt;Marre de Free…&lt;/h2&gt;
&lt;p&gt;Depuis 2003 maintenant je suis client ADSL de Free. Là où j&#39;ai toujours conseillé et trouvé que Free était un des acteurs du marché qui faisait bouger les choses, j&#39;ai depuis changé d&#39;avis.&lt;br/&gt;

La Freebox révolution est une belle machine, arrivée bien avant les machines des concurrents mais, comme Free l&#39;avait fait avec la version précédente, le produit livré était bien loin des promesses tenues lors de la conférence de presse. Il aura fallu une bonne année avant que la box soit réellement stabilisée et n&#39;ait plus ces bugs les plus gênants (volume non conservé, paramètres volatiles). En plus de cette technique consistant à considérer le client comme beta testeur, vient maintenant le problème du débit : celui ci n&#39;a pas arrêté pas de se dégrader : la situation était telle que j&#39;en venais à me connecter au VPN de ma société pour réussir un build Maven dans des temps raisonnables (80ko/s qui se transforment en 2Mo/s pour télécharger des dépendances). En supplément je suis abonné Canal Plus et l&#39;accès à Canal Plus à la demande via la Freebox est devenu complètement erratique (problème étrange parce que depuis ma TV l&#39;accès fonctionne bien mieux, Free est sûrement moins à blâmer dans ce cas).&lt;/p&gt;
&lt;p&gt;L&#39;élément déclenchant le changement chez moi a été le récent événement concernant les DNS menteurs de la Freebox effectuant un bloquage automatique et non configurable des publicités. Ce sujet a donné lieu à des centaines de commentaires sur Internet, et je me situe du côté de ceux qui ne sont pas opposé à l&#39;intégration de la fonctionnalité, mais pas de cette façon : les utilisateurs &lt;em&gt;lambda&lt;/em&gt; auront cette fonctionnalité activé par défaut et n&#39;auront plus la possibilité de découvrir des opportunités grâce à la publicité. Et pour les utilisateurs avancés la non configurabilité du bloquage rend l&#39;initiative complètement inutile. &lt;/p&gt;
&lt;p&gt;Ayant la chance d&#39;être desservi par le câble, le choix d&#39;un nouveau fournisseur d&#39;accès a été largement simplifié : Bouygues télécom et son offre BBox sensation ou Numericable. Vu les mauvais retours que j&#39;ai pu avoir sur le boitier de chez Bouygues et le fait que le réseau utilisé est celui de Numericable je me suis tourné vers ce fournisseur. &lt;/p&gt;
&lt;h2&gt;Passage chez Numericable&lt;/h2&gt;
&lt;p&gt;J&#39;ai passé ma commande le 7 janvier, le 11 janvier j&#39;ai reçu LaBox en relai colis. Le branchement fait le soir même, rien ne marchait : j&#39;avais le signal correctement synchronisé mais ni TV ni Internet. &lt;br/&gt;
Pour informations, la procédure d&#39;inscription via le site &lt;a href=&quot;http://signup.numericable.fr&quot;&gt;http://signup.numericable.fr&lt;/a&gt; ne fonctionnait pas (impossible de reconnaitre le matériel). &lt;br/&gt;
Le lendemain, j&#39;ai contacté le service client via le chat (très bonne expérience utilisateur ceci dit en passant) qui a fini d&#39;activer ma ligne. Internet fonctionnait comme voulu mais j&#39;avais toujours un problème avec le service TV, LaBox me gratifiait d&#39;un message &quot;droits expirés&quot; dès l&#39;allumage et en allant dans le menu de diagnostic le numéro de carte ne s&#39;affichait même pas. La solution à ce problème était tout simplement de garder LaBox sur une des chaines qui fonctionnait (317 - D17 a fonctionné pour moi) pendant environ une heure. Une heure plus tard, toutes les chaines fonctionnaient comme prévu et la magie a fait que le numéro de carte est désormais visible dans la partie diagnostic de LaBox.&lt;/p&gt;
&lt;p&gt;J&#39;ai enfin une connexion fiable et rapide ainsi qu&#39;un service TV de très bonne qualité. La seule fonctionnalité bonus de la Freebox qui va me manquer est le support AirPlay, l&#39;iPad avec Spotify vers l&#39;amplificateur home cinéma via AirPlay est une chose que j&#39;utilise très souvent quand je reçois du monde. Je suis donc à la recherche d&#39;une bonne alternative peu couteuse. &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/thoughts/de-free-a-numericable&quot;&gt;De Free à Numericable&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on January 12, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Sony Entertainment Web store - at last !]]></title>
  <link>/thoughts/www/sony-entertainment-web-store-at-last</link>
  <id>/thoughts/www/sony-entertainment-web-store-at-last</id>
  <published>2013-01-10T00:00:00-05:00</published>
  <updated>2013-01-10T00:00:00-05:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;I own a Playstation3 since January 2009 after getting the famous RROD on two successives Xbox 360. The PS3 is a really a nice gaming device, but the guys at Sony have  another focusing on everything but their store experience to their end users.&lt;/p&gt;
&lt;img class=&quot;alignright size-thumbnail wp-image-176&quot; alt=&quot;Playstation3&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2010/12/Playstation3-150x150.jpg&quot; width=&quot;150&quot; height=&quot;150&quot; /&gt;
&lt;p&gt;When I left the Xbox 360 world, one of the best feature of it was its store, I could even access it from my web browser and launch downloads so that I can play my games when I got home. I seriously miss this feature on the PS3. But I found that Sony, I guess along with the big store rewrite they made a few weeks ago, now allows us to browse and buy easily from our browser : &lt;a style=&quot;text-align: center;&quot; href=&quot;https://store.sonyentertainmentnetwork.com&quot;&gt;https://store.sonyentertainmentnetwork.com&lt;/a&gt;.&lt;/p&gt;

[caption id=&quot;attachment_817&quot; align=&quot;aligncenter&quot; width=&quot;584&quot;]&lt;a href=&quot;http://www.bloggure.info/thoughts/sony-entertainment-web-store-at-last.html/attachment/capture-decran-2013-01-10-a-20-29-45&quot; rel=&quot;attachment wp-att-817&quot;&gt;&lt;img class=&quot; wp-image-817&quot; alt=&quot;SEN Store&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2013/01/Capture-d’écran-2013-01-10-à-20.29.45-1024x797.png&quot; width=&quot;584&quot; height=&quot;454&quot; /&gt;&lt;/a&gt; Sony Entertainment Network Web Store[/caption]

&lt;em&gt;&lt;del datetime=&quot;2013-01-23T07:11:44+00:00&quot;&gt;I don&#39;t know yet if the download will be automagically launched when my Playstation 3 will automatically wake up to synchronise my Playstation+ account.&lt;br/&gt;I&#39;ll update this post when I&#39;ll know !&lt;/del&gt;&lt;br/&gt;
It seems that the downloads don&#39;t get pushed automatically to the console nor are downloaded when the console is syncing. Come on Sony, you&#39;ve come so close !&lt;/em&gt;

  &lt;p&gt;&lt;a href=&quot;/thoughts/www/sony-entertainment-web-store-at-last&quot;&gt;Sony Entertainment Web store - at last !&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on January 10, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Regexper : visualize your regexps]]></title>
  <link>/work/www/regexper-visualize-your-regexps</link>
  <id>/work/www/regexper-visualize-your-regexps</id>
  <published>2013-01-03T00:00:00-05:00</published>
  <updated>2013-01-03T00:00:00-05:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;
There is a famous quote about regular expressions, to which I don&#39;t really agree but I have to admit there is not much love for regexps around me. 
&lt;blockquote&gt;
Some people, when confronted with a problem, think &quot;I know, I&#39;ll use regular expressions.&quot; Now they have two problems.
&lt;small&gt;Jamie Zawinski&lt;/small&gt;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
I came across this little tool : &lt;a href=&quot;http://www.regexper.com/&quot;&gt;Regexper&lt;/a&gt; allowing to easily understand a regular expression by providing its state machine diagram :
[caption id=&quot;attachment_806&quot; align=&quot;aligncenter&quot; width=&quot;854&quot;]&lt;img src=&quot;http://www.bloggure.info/wp-content/uploads/2013/01/Capture-d’écran-2013-01-03-à-09.25.23.png&quot; alt=&quot;Regexper example&quot; width=&quot;854&quot; height=&quot;400&quot; class=&quot;size-full wp-image-806&quot; /&gt; Regexper example[/caption]
&lt;/p&gt;
&lt;p&gt;
I think it could be useful to put it in your bookmarks with &lt;a href=&quot;http://rejex.heroku.com/&quot;&gt;Rejex&lt;/a&gt; to use it when you work with regular expressions.
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/work/www/regexper-visualize-your-regexps&quot;&gt;Regexper : visualize your regexps&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on January 03, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[PostgreSQL under OS X Mountain Lion]]></title>
  <link>/work/postgresql-under-os-x-mountain-lion</link>
  <id>/work/postgresql-under-os-x-mountain-lion</id>
  <published>2013-01-03T00:00:00-05:00</published>
  <updated>2013-01-03T00:00:00-05:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;img src=&quot;http://www.bloggure.info/wp-content/uploads/2013/01/netsuke-150x150.png&quot; alt=&quot;postgresql&quot; width=&quot;150&quot; height=&quot;150&quot; class=&quot;alignright size-thumbnail wp-image-798&quot; /&gt;&lt;p&gt;I am actually doing a side project which you will heard of very soon. For this project I am using &lt;a href=&quot;http://www.playframework.org/&quot;&gt;Play! Framework&lt;/a&gt; v2 with the server side being developed in &lt;a href=&quot;http://www.scala-lang.org/&quot;&gt;Scala&lt;/a&gt;. To efficiently push this new application to production, I am using the &lt;a href=&quot;http://www.heroku.com/&quot;&gt;Heroku platform&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While my initial thoughts were using MySQL as my relational backend, the default stack provided by Heroku made me switch to postgresql that I have barely used in the past. I attempted to set it up on my machine, but with no luck, Mountain Lion is bundling an old version (8.4) whereas I wanted the same as on the Heroku platform. My first attempt with Homebrew was quite a disaster, I never managed to correctly connect my newly created user.&lt;/p&gt;

&lt;p&gt;
After a few hours mumbling, I looked for an alternative to the Homebrew version. Luckily, the guys at Heroku provide a neat application &lt;a href=&quot;http://postgresapp.com/&quot;&gt;Postgres.app&lt;/a&gt; to drop that allows to quickly start/stop a postgresql server. My problem was I didn&#39;t had enough connections to allow my application to start, I was always getting this message : &lt;code&gt;remaining connection slots are reserved for non-replication superuser connections&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
I edited the configuration file 
&lt;pre class=&quot;brush: bash&quot;&gt;vim &quot;~/Library/Application Support/Postgres/var/postgresql.conf&quot;&lt;/pre&gt;
to bump the number of connections to a lot more (20 instead of 10) but it prevented my server to start. With a lot of file editing and restarts, I found that the limit for my machine was 11 connections.
&lt;/p&gt;
&lt;p&gt;
The solution to this problem resides in a special setup of the mac os kernel which defines the amount of shared memory a process can allocate. To get rid of this, you can edit your &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; file (root required) and put the following lines (it will persist across reboots)
&lt;pre class=&quot;brush: bash&quot;&gt;
kern.sysv.shmall=65536
kern.sysv.shmmax=16777216
&lt;/pre&gt;
&lt;/p&gt;
&lt;em&gt;Credits for this tip comes from &lt;a href=&quot;http://ruby.zigzo.com/2012/07/07/postgresql-postgres-app-and-a-gotcha-on-mac-osx-lion&quot;&gt;http://ruby.zigzo.com/2012/07/07/postgresql-postgres-app-and-a-gotcha-on-mac-osx-lion&lt;/a&gt;/&lt;/em&gt;

  &lt;p&gt;&lt;a href=&quot;/work/postgresql-under-os-x-mountain-lion&quot;&gt;PostgreSQL under OS X Mountain Lion&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on January 03, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Juniper VPN SSL on Android]]></title>
  <link>/work/juniper-vpn-ssl-on-android</link>
  <id>/work/juniper-vpn-ssl-on-android</id>
  <published>2013-01-01T00:00:00-05:00</published>
  <updated>2013-01-01T00:00:00-05:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">This morning I wanted to check if my newly installed backup scripts were working, but I didn&#39;t want to get my laptop out of my backpack. 

A quick search got me to this little application from Juniper which lets me connect to our VPN easily (equivalent for Network Connect client on desktops) : &lt;a href=&quot;https://play.google.com/store/apps/details?id=net.juniper.junos.pulse.android&quot;&gt;https://play.google.com/store/apps/details?id=net.juniper.junos.pulse.android&lt;/a&gt;

  &lt;p&gt;&lt;a href=&quot;/work/juniper-vpn-ssl-on-android&quot;&gt;Juniper VPN SSL on Android&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on January 01, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Graph of programming languages people used in 2012]]></title>
  <link>/www/graph-of-programming-languages-people-used-in-2012</link>
  <id>/www/graph-of-programming-languages-people-used-in-2012</id>
  <published>2012-12-30T00:00:00-05:00</published>
  <updated>2012-12-30T00:00:00-05:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;I came across this link representing a visualization of programming languages usage based on a hashtag collect : &lt;a href=&quot;http://www.ioncannon.net/projects/code2012/&quot;&gt;http://www.ioncannon.net/projects/code2012/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Although this method can be criticized, it provides interesting data : JavaScript is the clear winner with Java just behind. We can see Scala is a growing language too, it has been used more than PHP last year (according to this study). &lt;/p&gt;

&lt;em&gt;If you find another study on this topic don&#39;t hesitate to comment this blog post to let me know.&lt;/em&gt;

  &lt;p&gt;&lt;a href=&quot;/www/graph-of-programming-languages-people-used-in-2012&quot;&gt;Graph of programming languages people used in 2012&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on December 30, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[IntelliJ 12 Darcula + Monokai]]></title>
  <link>/work/intellij-12-darcula-monokai</link>
  <id>/work/intellij-12-darcula-monokai</id>
  <published>2012-12-28T00:00:00-05:00</published>
  <updated>2012-12-28T00:00:00-05:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;a href=&quot;https://twitter.com/loic_d&quot;&gt;Loïc Descotte&lt;/a&gt; shared via Twitter an excellent color scheme for IntelliJ inspired by &lt;a href=&quot;http://studiostyl.es/schemes/monokai&quot;&gt;Monokai&lt;/a&gt; color scheme.&lt;/p&gt;

[caption id=&quot;attachment_780&quot; align=&quot;alignright&quot; width=&quot;917&quot;]&lt;img class=&quot;size-full wp-image-780&quot; alt=&quot;IntelliJ Darcula + Monokai&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2012/12/Capture-d’écran-2012-12-28-à-14.37.12.png&quot; width=&quot;917&quot; height=&quot;424&quot; /&gt; IntelliJ Darcula + Monokai[/caption]

&lt;p&gt;You can grab it at the following link (&lt;a href=&quot;https://github.com/hugoferreira/greater-monokai/raw/master/GreaterMonokai.xml&quot;&gt;Monokai color scheme&lt;/a&gt;) or get the complete  corresponding settings jar file &lt;a href=&quot;https://github.com/hugoferreira/greater-monokai/raw/master/GreaterMonokai.jar&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
Setup is simple, under OS X you have to do the following (and then select the corresponding color scheme in settings) :
[code lang=&quot;bash&quot; light=&quot;on&quot;]
cp ~/Downloads/GreaterMonokai.xml ~/Library/Preferences/IntelliJIdea12/colors/
[/code]
Or you can simply import the jar containing the settings via the &lt;em&gt;File &gt; Import Settings...&lt;/em&gt; menu item in IntelliJ. The next time you&#39;ll restart your IDE, you should notice the change. The only thing I changed is the font size, 14pt is too big for me, I turned it to 12pt.


  &lt;p&gt;&lt;a href=&quot;/work/intellij-12-darcula-monokai&quot;&gt;IntelliJ 12 Darcula + Monokai&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on December 28, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quickly insert data to a SQL database in Groovy]]></title>
  <link>/.groovy/work/quickly-insert-data-to-a-sql-database-in-groovy</link>
  <id>/.groovy/work/quickly-insert-data-to-a-sql-database-in-groovy</id>
  <published>2012-12-27T00:00:00-05:00</published>
  <updated>2012-12-27T00:00:00-05:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;img src=&quot;http://www.bloggure.info/wp-content/uploads/2012/12/groovy-200px.png&quot; alt=&quot;groovy-200px&quot; width=&quot;200&quot; height=&quot;100&quot; class=&quot;alignright size-full wp-image-771&quot; /&gt;
&lt;p&gt;When we migrate data at &lt;a href=&quot;http://www.srmvision.com&quot;&gt;SRMvision&lt;/a&gt;, we use Groovy to focus on the migration logic without loosing time with heavy syntax and POJO mapping.
Groovy is a great tool to do this, and its out of the box Sql handling is really very good. I found myself having the need to insert data to multiple existing table filling all columns.&lt;/p&gt;


&lt;p&gt;While we can do it easily, it can become a mess rapidly when there is a lot of columns to handle. With this little snippet, you can leverage Groovy&#39;s maps to get a solid insertIntoTable&lt;/p&gt;
&lt;pre class=&quot;brush: groovy&quot;&gt;
static def insertIntoTable(String tableName, 
                           Map paramMap, 
                           final Sql sql) {
        sql.executeInsert(&quot;&quot;&quot;
             INSERT INTO ${tableName} 
                    (${paramMap.keySet().join(&#39;,&#39;)})
                    VALUES 
                    (${paramMap.keySet().collect { key -&gt; &quot;:&quot; + key }.join(&#39;,&#39;)})
        &quot;&quot;&quot;, paramMap)
}
&lt;/pre&gt;

&lt;p&gt;To use it, one can simply call it this way (with the sql object correctly bound to a connection)&lt;/p&gt;
&lt;pre class=&quot;brush: groovy&quot;&gt;
def paramMap = [ 
    id : 1, 
    myFirstColumn : &quot;My first value&quot;, 
    mySecondColumn : &quot;Second&quot; 
]
insertIntoTable(&quot;MyTable&quot;, paramMap, sql)
&lt;/pre&gt;

  &lt;p&gt;&lt;a href=&quot;/.groovy/work/quickly-insert-data-to-a-sql-database-in-groovy&quot;&gt;Quickly insert data to a SQL database in Groovy&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on December 27, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[OS X Tools I use in my daily activities]]></title>
  <link>/thoughts/work/os-x-tools-i-use-in-my-daily-activities</link>
  <id>/thoughts/work/os-x-tools-i-use-in-my-daily-activities</id>
  <published>2012-12-22T00:00:00-05:00</published>
  <updated>2012-12-22T00:00:00-05:00</updated>
  <author>
    <name>Your Name</name>
    <uri></uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;img class=&quot;alignright size-thumbnail wp-image-758&quot; alt=&quot;MBP Keyboard&quot; src=&quot;http://www.bloggure.info/wp-content/uploads/2012/12/IMG_20121222_000541-150x150.jpg&quot; width=&quot;150&quot; height=&quot;150&quot; /&gt;During a Jabber talk with my friend &lt;a href=&quot;http://www.bloggure.info/author/tdebarochez&quot;&gt;Thomas Debarochez&lt;/a&gt; I mentioned an app I use everyday that he hardly ever knows. Then I think it might be a good idea to describe the tools I use everyday at work or home on my machines. My main computer is a MacBook Pro (late 2011) running latest OS X version (Mountain Lion). I use it to develop the &lt;a href=&quot;https://www.srmvision.com&quot;&gt;SRMvision platform&lt;/a&gt; which is built using Java EE technologies (the whole stack will be detailed in a further post).&lt;/p&gt;

&lt;p&gt;The tools I use on my machine in my development process are the following :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA Ultimate 12&lt;/a&gt; : the best Java / JVM language IDE so far. It is a great IDE, offers a really good Maven integration and there is a wide range of plugins available. This last version features the really nice Darcula theme (eye candyness) and out of process compiler which makes it really fast.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;Sublime Text 2&lt;/a&gt; : it is a simple but really powerful text editor. I use it to open every file that is out of my IntelliJ&#39;s projects.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.sequelpro.com/&quot;&gt;Sequel Pro&lt;/a&gt; : a nice and powerful mySQL GUI client. It is sometimes more comfortable to query database with a GUI than with the command line.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://mongohub.todayclose.com/&quot;&gt;MongoHub&lt;/a&gt; : a simple MongoDB GUI client, crashy but it can be useful at times.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://maven.apache.org/&quot;&gt;Apache Maven&lt;/a&gt; : there is no need to elaborate on this one, I think every Java developer knows it.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/middleware/glassfish/downloads/index.html&quot;&gt;Oracle Glassfish&lt;/a&gt; : one should chose a JavaEE application server, we chose the reference implementation of the spec.&lt;/li&gt;
&lt;/ul&gt;
I also use hosted service (self-hosted on our internal network or in the cloud for some) :
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://gitlabhq.com/&quot;&gt;GitlabHQ&lt;/a&gt; : if you&#39;ve read past blog entries, you should know this wonderful tool to manage git repositories (self hosted).&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt; : the well known build tool (self-hosted).&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.sonatype.org/nexus/&quot;&gt;Sonatype Nexus&lt;/a&gt; : as we build our softwares with Apache Maven, we need an internal artifact repository, this one was chosen because it was the simplest to install (when we did it) (self-hosted).&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.sonarsource.org/&quot;&gt;Sonar&lt;/a&gt; : associated in our build pipeline, we have got a Sonar install to collect metrics on our projects (self-hosted).&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://trac.edgewall.org/&quot;&gt;Trac&lt;/a&gt; : old but not dead, Trac is our source ticketing system from day one. It is surely not the hottest kid in town, but it does its job as expected (self-hosted).&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://trello.com/&quot;&gt;Trello&lt;/a&gt; : our sprint management tool, its card approach with TrelloScrum plugin allows us to easily plan and run our sprints.&lt;/li&gt;
&lt;/ul&gt;
In my list of programs I run everyday without being specifically targeted toward development, I use the following :
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://synergy-foss.org/&quot;&gt;Synergy&lt;/a&gt; : it is a simple tool allowing you to share one computer&#39;s mouse and keyboard with many other machines using your network connection. As I have two other machines at my desk, this tool is really useful in order to control each one from a mouse and keyboard.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.controlplaneapp.com/&quot;&gt;ControlPlane.app&lt;/a&gt; : a great app if you use a MacBook, it allows you to define profiles and trigger them based on your location. I have a few profiles allowing me to toggle screensaver password, screen luminosity and my synergy setup.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.alfredapp.com/&quot;&gt;Alfred.app&lt;/a&gt; : it is Apple&#39;s Spotlight on steroid, you can do whatever you want to by simply hitting the shortcut you defined in Alfred. My usage is mainly using it as an application launcher.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://getcloudapp.com/&quot;&gt;Cloud.app&lt;/a&gt; : this little tool is really great. Every screenshot I take is uploaded to their servers and the link is then automatically put in my clipboard. It is really useful to quickly share screenshots over instant messenging.&lt;/li&gt;
&lt;/ul&gt;
And to finish with this little blog post, here are the stuff I keep installed on my machine even though I don&#39;t use them daily :
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;HomeBrew&lt;/a&gt; : when I got my first Intel Mac, I used MacPorts to install tools from the Unix world from sources. This tool is great, but you end up downloading a lot of dependencies to get a simple soft to build and you are transforming your CPU to a toaster. Then I heard about HomeBrew, which is the simplest and the greatest way of managing third party applications on your Mac. Everything is clean, there is no need to be root, no need to be part of the global warming thing with your CPU.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://www.dropbox.com&quot;&gt;Dropbox&lt;/a&gt; : I think this one is known by everyone now. Just upload and share your files easily, the app is so great that I can even forget the magic it is doing in my back.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://getpocket.com/&quot;&gt;Pocket&lt;/a&gt; : (previously Read It Later) is a great software to mark links, blog posts, everything you can come across on the web as to be read later. The Mac application is beautiful, so is the Android one (Hint : don&#39;t stack in it if you can&#39;t manage to free time for unstacking).&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.sourcetreeapp.com/&quot;&gt;SourceTree.app&lt;/a&gt; and &lt;a href=&quot;http://mac.github.com/&quot;&gt;Github.app&lt;/a&gt;: at times, I need to get a visual help to manage my git repositories. SourceTree is a complete tool offering a really good looking branch visualization. Github allows to seamlessly use their service, I often use it to reorder my commits before making a pull request.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://colloquy.info/&quot;&gt;Colloquy&lt;/a&gt; : a really good IRC client, I use it when I am telecommuting, otherwise I use the classic XChat (linux version).&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://spotify.com/&quot;&gt;Spotify&lt;/a&gt; : I think I can not work without music, the 10€ / month membership allows me to use it with my phone too, it is very unlikely that I cancel this subscription anytime soon (I even use the Linux version).&lt;/li&gt;
       &lt;li&gt;&lt;a href=&quot;http://latenitesoft.com/xslimmer/&quot;&gt;XSlimmer&lt;/a&gt; : I use this tool from time to time to slim down the size of the app I have installed. It works by removing unused language in packages.&lt;/li&gt;
       &lt;li&gt;&lt;a href=&quot;http://latenitesoft.com/clusters/&quot;&gt;Clusters&lt;/a&gt; : I have this one installed and do its work without worrying of what it is doing. It allows me to save some space in the folders where I store documents (compression is very efficient here).&lt;/li&gt;
       &lt;li&gt;&lt;a href=&quot;https://www.dashlane.com/fr/cs/3b9ba006&quot;&gt;Dashlane&lt;/a&gt; : this password and identity manager is really good. It exists for different OSes and allows to setup strong passwords on every account you own : must have.&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;/thoughts/work/os-x-tools-i-use-in-my-daily-activities&quot;&gt;OS X Tools I use in my daily activities&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;&quot;&gt;Site Title&lt;/a&gt; on December 22, 2012.&lt;/p&gt;</content>
</entry>

</feed>
